// const express = require('express');
// const mongoose = require('mongoose');
// const bcrypt = require('bcrypt');
// const jwt = require('jsonwebtoken');
// const cors = require('cors');

// const app = express();
// app.use(express.json());
// app.use(cors({
//     origin: 'http://localhost:3000',
// }));

// // Logging middleware
// app.use((req, res, next) => {
//     console.log(`Received ${req.method} request for '${req.url}'`);
//     next();
// });

// // Connect to MongoDB Atlas
// mongoose.connect('mongodb+srv://Cats1224:Cats1224@blyn.imjii.mongodb.net/attendance?retryWrites=true&w=majority&appName=Blyn', {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
// }).then(() => {
//     console.log('Connected to MongoDB');
// }).catch(err => {
//     console.error('MongoDB connection error:', err);
// });

// // User schema and model for authentication
// const UserSchema = new mongoose.Schema({
//     username: { type: String, required: true, unique: true },
//     password: { type: String, required: true },
// });

// const User = mongoose.model('User', UserSchema);

// // Officer schema and model
// const OfficerSchema = new mongoose.Schema({
//     name: { type: String, required: true },
//     position: { type: String, required: true },
//     present: { type: Boolean, default: false }, // Default to false (not present)
// });

// const Officer = mongoose.model('Officer', OfficerSchema);

// // Student schema and model
// const StudentSchema = new mongoose.Schema({
//     customId: { type: String, required: true, unique: true },
//     name: { type: String, required: true },
//     section: { type: String, required: true },
// });

// const Student = mongoose.model('Student', StudentSchema);

// // Attendance schema and model
// const AttendanceSchema = new mongoose.Schema({
//     date: { type: String, required: true },
//     attendance: { type: Map, of: Boolean }, // Maps student IDs to present/absent status
// });

// const Attendance = mongoose.model('Attendance', AttendanceSchema);

// // Event schema and model
// const EventSchema = new mongoose.Schema({
//     date: { type: String, required: true },
//     title: { type: String, required: true },
//     description: { type: String, required: true },
// });

// const Event = mongoose.model('Event', EventSchema);

// // Login route
// app.post('/login', async (req, res) => {
//     const { username, password } = req.body;

//     try {
//         const user = await User.findOne({ username });
//         if (!user) {
//             return res.status(400).json({ message: 'User not found' });
//         }

//         const isMatch = await bcrypt.compare(password, user.password);
//         if (!isMatch) {
//             return res.status(400).json({ message: 'Invalid credentials' });
//         }

//         const token = jwt.sign({ id: user._id }, 'your_jwt_secret', { expiresIn: '1h' });
//         res.json({ token });
//     } catch (err) {
//         console.error('Login error:', err);
//         res.status(500).json({ error: 'Server error' });
//     }
// });

// // CRUD operations for Officers
// app.post('/main/jpcs-officers', async (req, res) => {
//     const { name, position, present } = req.body;

//     try {
//         const officer = new Officer({ name, position, present });
//         await officer.save();
//         res.status(201).json(officer);
//     } catch (err) {
//         console.error('Error adding officer:', err.message);
//         res.status(500).json({ message: 'Failed to add officer' });
//     }
// });

// app.get('/main/jpcs-officers', async (req, res) => {
//     try {
//         const officers = await Officer.find();
//         res.json(officers);
//     } catch (err) {
//         console.error('Error fetching officers:', err);
//         res.status(500).json({ message: 'Failed to fetch officers' });
//     }
// });

// app.put('/main/jpcs-officers/:id', async (req, res) => {
//     const { present } = req.body;

//     try {
//         const updatedOfficer = await Officer.findByIdAndUpdate(req.params.id, { present }, { new: true });
//         if (!updatedOfficer) {
//             return res.status(404).json({ message: 'Officer not found' });
//         }
//         res.json(updatedOfficer);
//     } catch (err) {
//         console.error('Error updating officer:', err);
//         res.status(500).json({ message: 'Failed to update officer' });
//     }
// });

// app.delete('/main/jpcs-officers/:id', async (req, res) => {
//     try {
//         const deletedOfficer = await Officer.findByIdAndDelete(req.params.id);
//         if (!deletedOfficer) {
//             return res.status(404).json({ message: 'Officer not found' });
//         }
//         res.status(204).send();
//     } catch (err) {
//         console.error('Error deleting officer:', err);
//         res.status(500).json({ message: 'Failed to delete officer' });
//     }
// });

// // CRUD operations for Students
// app.post('/main/attendance', async (req, res) => {
//     const { name, section, customId } = req.body;

//     try {
//         const existingStudent = await Student.findOne({ name, section });
//         if (existingStudent) {
//             return res.status(400).json({ message: 'Student with this name already exists in this section' });
//         }

//         const student = new Student({ name, section, customId });
//         await student.save();
//         res.status(201).json(student);
//     } catch (err) {
//         console.error('Error adding student:', err.message);
//         res.status(500).json({ message: 'Failed to add student' });
//     }
// });

// app.get('/main/attendance', async (req, res) => {
//     try {
//         const students = await Student.find();
//         res.json(students);
//     } catch (err) {
//         console.error('Error fetching students:', err);
//         res.status(500).json({ message: 'Failed to fetch students' });
//     }
// });

// app.put('/main/attendance/:id', async (req, res) => {
//     const { name, section } = req.body;
//     try {
//         const updatedStudent = await Student.findByIdAndUpdate(req.params.id, { name, section }, { new: true });
//         if (!updatedStudent) {
//             return res.status(404).json({ message: 'Student not found' });
//         }
//         res.json(updatedStudent);
//     } catch (err) {
//         console.error('Error updating student:', err);
//         res.status(500).json({ message: 'Failed to update student' });
//     }
// });

// app.delete('/main/attendance/:id', async (req, res) => {
//     try {
//         const deletedStudent = await Student.findByIdAndDelete(req.params.id);
//         if (!deletedStudent) {
//             return res.status(404).json({ message: 'Student not found' });
//         }
//         res.status(204).send();
//     } catch (err) {
//         console.error('Error deleting student:', err);
//         res.status(500).json({ message: 'Failed to delete student' });
//     }
// });


// // Save attendance data route
// app.post('/main/attendance/:date', async (req, res) => {
//     const { date } = req.params; // Get the date from the URL parameter
//     const { attendance } = req.body; // Get attendance data from the request body

//     try {
//         // Save attendance data to the Attendance collection
//         const attendanceData = new Attendance({ date, attendance });
//         await attendanceData.save();

//         res.status(201).json(attendanceData);
//     } catch (err) {
//         console.error('Error saving attendance data:', err.message);
//         res.status(500).json({ message: 'Failed to save attendance data' });
//     }
// });

// // CRUD operations for Events
// app.post('/main/events', async (req, res) => {
//     const { date, title, description } = req.body;

//     try {
//         const event = new Event({ date, title, description });
//         await event.save();
//         res.status(201).json(event);
//     } catch (err) {
//         console.error('Error adding event:', err.message);
//         res.status(500).json({ message: 'Failed to add event' });
//     }
// });

// app.get('/main/events', async (req, res) => {
//     try {
//         const events = await Event.find();
//         res.json(events);
//     } catch (err) {
//         console.error('Error fetching events:', err);
//         res.status(500).json({ message: 'Failed to fetch events' });
//     }
// });

// app.put('/main/events/:id', async (req, res) => {
//     const { title, description } = req.body;

//     try {
//         const updatedEvent = await Event.findByIdAndUpdate(req.params.id, { title, description }, { new: true });
//         if (!updatedEvent) {
//             return res.status(404).json({ message: 'Event not found' });
//         }
//         res.json(updatedEvent);
//     } catch (err) {
//         console.error('Error updating event:', err);
//         res.status(500).json({ message: 'Failed to update event' });
//     }
// });

// app.delete('/main/events/:id', async (req, res) => {
//     const eventId = req.params.id;

//     try {
//         const result = await Event.findByIdAndDelete(eventId);
//         if (!result) {
//             return res.status(404).json({ message: 'Event not found' });
//         }
//         res.status(200).json({ message: 'Event deleted successfully' });
//     } catch (err) {
//         console.error('Error deleting event:', err);
//         res.status(500).json({ message: 'Failed to delete event' });
//     }
// });

// // Start the server
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//     console.log(`Server is running on port ${PORT}`);
// });
